
name: Build and test Absytree

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "build"
  cancel-in-progress: true

jobs:
  build-absytree:
    name: test
    runs-on: ubuntu-latest
    container:
      image: nimlang/nim:2.0.0-regular
      volumes:
        - ${{ github.workspace }}:/app
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3
      - name: add Absytree as git safe.directory so nimble can install stuff
        run: git config --global --add safe.directory /__w/Absytree/Absytree

      - run: x86_64-w64-mingw32-gcc
        continue-on-error: true
      - run: apt-get update
        continue-on-error: true
      - run: apt-get install gcc-mingw-w64
        continue-on-error: true
      - run: x86_64-w64-mingw32-gcc
        continue-on-error: true


# jobs:
#   build-absytree:
#     name: Build Absytree
#     runs-on: ubuntu-latest
#     container:
#       image: nimlang/nim:2.0.0-regular
#       volumes:
#         - ${{ github.workspace }}:/app
#     steps:
#       - name: Checkout the repo
#         uses: actions/checkout@v3
#       - name: add Absytree as git safe.directory so nimble can install stuff
#         run: git config --global --add safe.directory /__w/Absytree/Absytree
#       - name: nimble setup
#         run: PATH=/github/home/.nimble/bin:$PATH nimble setup

#       - name: nimble buildAbsytreeServer
#         run: nimble buildAbsytreeServer
#       - name: nimble buildNimsuggestWS
#         if: always()
#         run: nimble buildNimsuggestWS
#       - name: nimble buildDesktop
#         if: always()
#         run: nimble buildDesktop
#       - name: nimble buildDesktopWindows
#         if: always()
#         run: nimble buildDesktopWindows
#       - name: nimble buildBrowser
#         if: always()
#         run: nimble buildBrowser

#       - run: mkdir release
#       - run: cp config release
#       - run: cp fonts release
#       - run: cp languages release
#       - run: cp themes release
#       - run: cp scripting release
#       - run: cp LINCENCES release
#       - run: cp LICENSE release
#         continue-on-error: true
#       - run: cp ast.exe release
#         continue-on-error: true
#       - run: cp absytree-server release
#         continue-on-error: true
#       - run: cp nimsuggest-ws release
#         continue-on-error: true
#       - run: cp libgcc_s_seh-1.dll release
#       - run: cp libstdc++-6.dll release
#       - run: cp libwinpthread-1.dll release
#         continue-on-error: true
#       - run: cp ast.exe release

#       - uses: actions/upload-artifact@v3
#         with:
#           name: release
#           path: release

#   run-tests:
#     name: Run tests
#     runs-on: ubuntu-latest
#     container:
#       image: nimlang/nim:2.0.0-regular
#       volumes:
#         - ${{ github.workspace }}:/app
#     steps:
#       - name: Checkout the repo
#         uses: actions/checkout@v3
#       - name: add Absytree as git safe.directory so nimble can install stuff
#         run: git config --global --add safe.directory /__w/Absytree/Absytree
#       - name: nimble setup
#         run: PATH=/github/home/.nimble/bin:$PATH nimble setup

#       - name: Run tests
#         run: testament --print category unit
#       - name: Build test report
#         if: always()
#         run: testament html

#       - uses: actions/upload-artifact@v3
#         if: always()
#         with:
#           name: testresults.html
#           path: testresults.html

#   # Build job
#   build-page:
#     runs-on: ubuntu-latest
#     needs: run-tests
#     if: always()
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3
#       - uses: actions/download-artifact@v3
#         with:
#           name: testresults.html
#         continue-on-error: true
#       - name: Setup Pages
#         uses: actions/configure-pages@v3
#       - name: Build with Jekyll
#         uses: actions/jekyll-build-pages@v1
#         with:
#           source: ./
#           destination: ./_site
#       - name: Upload artifact
#         uses: actions/upload-pages-artifact@v2

#   # Deployment job
#   deploy:
#     environment:
#       name: github-pages
#       url: ${{ steps.deployment.outputs.page_url }}
#     runs-on: ubuntu-latest
#     needs: build-page
#     if: always()
#     steps:
#       - name: Deploy to GitHub Pages
#         id: deployment
#         uses: actions/deploy-pages@v2
